要说学习JavaScript，首先要说到JavaScript这门语言本身的特质，简直就是一门神奇的语言，他正在朝着万能钥匙的方向发展，只要会JavaScript，有一种走遍WEB开发无敌手的赶脚，且仿佛"非常简单"。先来看看JavaScript这些年都干了什么？
    1、生产出一大堆库：jQuery、MooTools、Prototype、Dojo、YUI、ExtJS、ZeptoJS......
    2、生产出一大堆框架：AngularJS、VueJS、ReactJS、EmberJS、NuxtJS、ThreeJS......
    3、生产出一大堆衍生语言：TypeScript、JSX、CoffeeScript......
    4、ES6的诞生与发展：对于ES3/ES5来说，ES6就是一块大大的语法糖......

返过来，我们来看看为什么会出现如此广的发展？
    1、库的产生原因   JS库其实就是一堆函数接口，用了这些库，很多JavaScript程序将不需要开发者写，直接用库函数接口来完成功能就搞定。   库的出现证明前端程序的要求越来越高，复杂度也随之增加，那么用JS实现功能就会越来越难，一堆库给你写好了方法，你直接用，大大减少了程序开发周期。
    2、框架的产生原因   JS框架就是JS的开发模式，更好、更合理的项目架构，使得项目易维护、易扩展，大部分框架还提供一套完善的数据与视图绑定机制来优化了前端性能。   框架的出现证明了JavaScript本身的优点与缺点，优点是灵活，缺点也是灵活，可以灵活运用一门语言是多棒的一件事情，但是有时往往因为灵活导致开发者很难掌握合理的开发模式，怎么写都对，又不知道怎么写是对的。
    3、衍生语言的产生的原因   JavaScript除了语法部分以外跟浏览器打交道最多的语言，这个特点就决定了他本身没有特定的开发模式，导致没有特定的开发规范，这一点导致了开发到了后期，很难进行维护和扩展，这时衍生语言就来解决这一难题了，他们干脆把JavaScript改造成一套完全面向对象的语言。逼迫开发者用面向对象的思想和既定规则进行开发。
    4、ES6的诞生   很多人认为ES6的诞生是JavaScript救命稻草，这不是没有道理，首先，ES6引入了类的概念，但是这个类的概念也是阉割版；其次，ES6引入了模块化的概念，使得JavaScript可以真正意义上分模块开发且可相互依赖；再次，ES6对原本JavaScript的异步概念进行了加强，并针对性的增加了强有力的异步问题解决方案。综上所述，我们可以非常容易的整理一套学习方案。


第一弹：ECMAScript（JavaScript的基础）
你可以理解他为JavaScript的本尊或者灵活，如果你认为它仅仅是个语法的盒子，那就错了，它的本质是JavaScript开发的理论基础和技术提升的踏板。对于初学者来说，这一关很难，但如果你翻过了这座大山，恭喜你，后面的内容你可以边抽烟边学习了，反之，还是放弃吧。
那我们来看看都要学些什么？    

    1、编程语言、ECMA、JavaScript、浏览器的发展史
    2、基本语法：值、变量、运算、语句等等
    3、各种类型的函数、参数与原理
    4、预编译、暗示全局变量
    5、作用域、作用域链、闭包
    6、对象、构造函数、实例化
    7、原型、原型链、对象继承
    8、对象、对象克隆
    9、数组方法、类数组    
    10、自定义原型方法、碎片知识
    11、错误信息、错误捕获
    12、严格模式
    13、变量声明周期、垃圾回收


第二弹：DOM（文档对象模型，JS操作HTML用的（记住：JS是操作不了CSS的！！））
JavaScript跟浏览器关系真的不要太好（非常好的意思），但是如果把学习DOM理解为对DOM结构的增删改查，那就太肤浅了。我们来看看DOM包含哪些内容呢？    
    1、掌握document对象、了解其中的方法的继承关系（特别是相关原型的问题）
    2、遍历节点树与遍历元素节点树（重考点）
    3、节点的增删改查、元素属性的操作
    4、滚动相关操作
    5、样式属性相关操作
    6、元素运动
    （兼容性封装！兼容性封装！兼容性封装！）
    7、事件处理函数与绑定机制
    8、事件的冒泡捕获机制
    9、事件对象与事件源对象    
    10、事件代理
    11、模块化与插件化开发的基础
    12、鼠标行为坐标系与相关兼容性、功能性函数封装
    13、输入与状态改变事件    
    14、鼠标行为预测技术    
    15、键盘事件    
    16、DOM常见问题的解决方案与函数封装    
    17、至少完成10个典型案例


第三弹：BOM（浏览器对象模型，JS操作浏览器用的，没事儿弹个窗？没娘的孩子最惨）
BOM一直是JavaScript特殊的存在，没人搭理，却时不时用用的存在。毕竟没娘没规范，所以很多内容都不在用了，但不代表你可以一点都不知道。职业素养！职业素养！职业素养！ 
    1、window、Navigator、history、screen、location对象的属性与方法
    2、window、location对象深入学习
    3、初步掌握单页面应用的简单开发
    4、浏览器相关检查


第四弹：正则表达式（匹配字符串用的，这个字符串是不是个E-mail呢？手机号是不是138开头的呢？）
这个东西可以说相当于是一门小语言，难学、难记、难掌握，但是在关键时刻能给你解决大问题，往往需要大量代码些的程序，用正则，1行搞定。
怎么学？老老实实学，然后老老实实一次又一次的抠破头皮用。 
    1、转义相关、修饰与元字符
    2、正则量词、属性、方法
    3、正则相关的所有方法
    4、正向预查、贪婪与非贪婪模式
    5、replace方法、不捕获分组
    6、整个50个正则案例逐个分析


第五弹：JSON（一种很友好的数据格式）
长这样舍尔滴 -> {"名字":"JS++","年龄":"18","婚否":"未婚"}
    1、JSON数据认知与解析方法
    2、JSON对象与字符串的转换方法
    3、AJAX的基本认知
    4、数据渲染、模板渲染
    5、数据缓存机制、数据缓存池


第六弹：浏览器（职业素养！职业素养！前端优化!）
很多开发者并不了解浏览器，这对于前端开发是非常非常可怕的一件事，因为你写的东西能不能用，取决于你是否懂得根据浏览器相关的机制来优化你的程序 
    1、DOM/CSS/渲染树
    2、文档的解析与加载
    3、DOM相关回流与重绘
    4、渲染引擎、声明HTML与渲染模式
    5、JS引擎的执行机制


第七弹：JS运动（就是用JS让DOM元素各种动）
这个东西在实际开发中是基本用不到的，但你就不学了吗？不行！！不行！！不行！！
为啥？JS运动是你了解动画执行机制的唯一途径，其次，是你提升JS编程逻辑能力的一个重要学习过程。
比如原生JS开发一个轮播图，这是一个训练综合运用能力的过程。
当然相关的数学知识也要学一些哟~ 
    1、JS运动的原理与机制
    2、加速度、弹性运动
    3、重力运动与拖拽效果
    4、原生JS开发无缝轮播图


第八弹：ES5数组扩展方法
    ES3给了我们很多数组相关的方法，但觉得不够，再给你加一些，方便你开发
    ES3的数组方法回顾一下：
    concat, join, pop, push, reverse, shift, slice, sort, splice, toString, unshift
    ES5给我们扩展的方法：（都跟遍历数组有关）
    forEach, map, every, some, filer, reduce, reduceRight
    学习内容：
    所有ES5的数组扩展方法的使用场景与重写（兼容性也得考虑考虑啦）
    实战肯定少不了，因为你要知道各个方法的使用场景。
    特别是forEach、map、filter、reduce


第九弹：函数式编程
你如果顺利走到这里，恭喜你，基础你已经学完了，但是函数式编程是你提升JS能力的又一座大山，这座山主要是理论太抽象，很多都没有特别明显的使用场景，它究竟是干什么的呢？它其实就是教你封装一个又一个的函数完成一些比较复杂的功能。可以说是提升抽象函数的能力的利器集合。 
    1、纯函数
    2、函数组合、结合律、pointfree
    3、高阶函数
    4、函数柯里化与封装
    5、偏函数与封装
    6、惰性函数与使用场景
    7、缓存函数
    8、函数防抖、函数节流（必会）
    9、归类函数（必会）


第十弹：碎片知识
    我们学了这么多东西，还要补充吗？看了下面的这些，你就知道了，还差的远呢？难受，香菇！！！ 
    1、同步与异步加载的三种方法
    2、放大与宽放大模式
    3、call/apply/bind以及bind重写（常考）
    4、标签的属性与特性
    5、Math方法
    6、封装byClassName
    7、断点测试、bug调试
    8、图片的预加载与懒加载
    9、日期对象与计时器 
    10、this指向问题
    11、DOM与虚拟DOM（常考）


第十一弹：网络
我是前端程序员，我为啥要学网络？这样的问题经常被问，简单！因为现在前后端开发分离了，分离不代表相互不搭理，分离既合作，合作就要相互了解对方个大概，其次，开发本身还会涉及到前后端联调的问题，所以前端程序员一定要掌握基本的网络知识。 
    1、服务器的搭建
    2、网络、URL、客户端与服务端、域名
    3、DNS/IP/TCP/UDP/HTTP/HTTPS
    4、三次握手、四次挥手
    5、www、http报文、请求方式、GET与POST
    6、http状态码、accept与ContentType
    7、缓存、长短连接、Content-Length、referrer
    8、http版本、同源策略
    9、同步与异步请求、混编的概念 
    10、AJAX以及原生JS封装AJAX
    11、AJAX版本、响应状态、超时设置、同步与异步设置
    12、6种跨域获取数据的方法
    13、iframe与网络相关 
    14、cookie相关 
    15、cookie+token技术 
    16、相关典型实战至少做8个


第十二弹：ES6（新的JavaScript版本）
作用在于引入了类、模块的概念，对异步处理提出了新的方案，也对JS对象们扩展了很多方法，让开发变得更加顺畅。  
    1、新增语法
    2、新增API
    3、集合
    4、异步
    5、面向对象
    6、这里需要一个大的实战去训练自己这是JavaScript要学习的内容，当然后续还有很多很多技术要学习。比如.......jQuery、HTML5技术、CSS3技术、什么BootStrap、CSS扩展语言Less/Sass、Webpack工程化、Git、VueJS......
















一、vue部分：
    1.vue 核心思想：数据驱动与组件化
    数据响应式：vue会将data内部对象使用 object.defineproperty() 转为 getter/setter ，当访问或更改这些对象时，同时触发getter/setter，内部对 DOM 进行操作，实现响应式。 vue3.x 中使用 proxy 监听这些对象，而非属性，避免递归循环监听。
    2.data 为什么是函数？
    避免组件相互影响，data 每次返回的是一个新对象，存放组件内部自己的数据，党内部数据改变时，并不会影响基于组件的其他组件，当组件被多次复用也是有独立数据的，每个组件实例都有自己的状态。
    3.keep-alive
    保存页面/组件的状态还可以避免组件反复创建和渲染，有效提升系统性能，就是保存组件的渲染状态。
    例如：用户在某个列表页面筛选条件得到列表页面数据后，进入详情页查看，当返回列表页我们还期望是用户筛选后的结果，就需要keep-alive
    注：kee-alive 之后便不会执行前四个生命周期，增加 activated() 与 deactivated()
    4.组件传值
    (1).父组件标签属性传值，子组件props 接收，$emit 修改，props/$emit
    (2).$emit/$on：公共组件Bus
    (3).$attrs/$listeners:
    (4).provide/inject
    (5).$parent/$children 与 ref
    5.computed与watch
    computed： 依赖数据的缓存，当数据未改变，则不会重新计算，可以设置 get  与 set。
    watch：可以获取新旧值，但是引用类型的值无法获取，也可在内部有异步操作
    6.v-for 与 v-if
    在同一标签体上时，v-for 先执行，vue 内部判断是先判断 v-for 然后 v-if 如果 v-if 可在外部，则不要和 v-for 统一标签出现，如需内部数据判断，可先对数据进行 computed 计算然后 v-for ，减少 render
    7.$nextTick
    需要在更新视图之后，基于新的视图进行操作
    使用场景：点击按钮获取并显示搜索框，获取焦点/点击显示元素的DOM元素获取
    8.路由守卫
    全局守卫：
        beforEach 全局前置守卫
        afterEach 全局后置守卫
        beforeResolve 全局解析守卫
        
    独享守卫：beforeEnter    单个路由守卫
    组件内部守卫：
    
        beforeRouterEnter 无法获取组件 this
        beforeRouteUpdate      当前路由改变，但组件被复用时调用；例：foo/1  => foo/2
        beforeRouteLeave    离开后，禁止用户在未保存修改前离开
        流程：beforeRouteLeave => beforEach => beforeRouteUpdate =>  beforeEnter    =>  beforeRouterEnter  =>  beforeResolve   => afterEach    => mounted => beforeRouterEnter 
    9.vuex
    store：单一状态树标识
    mutations：组件使用this.store.commit() 提交mutations
    getter：相当于计算属性，getter的返回值会根据依赖缓存，只有当依赖值发生改变，才会被重新计算 this.store.getters  获取，
    action：进行异步操作，最终提交 mutation，而不是直接改变状态；使用 this.store.dispatch() 触发action
二、js与浏览器等基础知识

    1.Es6 新增
    (1). let const 块级作用域（只在声明中生效）
    (2). 数组与对象的解构 
    (3).模板字符串，${} 允许换行
    (4). 字符串扩展方法    message.startsWith()/endSwith()/includes()
    (5). 箭头函数：this 指向，代码优化
    (6). 对象字面量增强
    ​       => 对象内部定义function 可省略关键字 function
    ​       => 通过 [] 使表达式作为数组
    ​       => 键值相等可省略值
    (7). 对象的扩展方法：object.assign()    object.is() Proxy
    (8). class 类
    (9). Set 与 Map 数据结构：
    ​       Set： Set 集合的值是唯一的，可用来去重；例如：let s = new Set();   s.size()；s.has('100')；s.delete('s')；s.clear();let result = [...new Set(arr)];    => 数组去重
    ​       Map：类似于对象，但是健可以是任意类型    WeakMap 弱引用版本；let m = new Map();    m.set(健，值)；m.get(健)；m.has()；m.delete()；m.clear()；m.forEach();
    (10). symbol()：全新原始数据类型 Object.getOwnPropertySymbol(obj)
    (11). for-of：可遍历任意一种数据类型，可中断，也可遍历 Set 与 Map
    (12). iterable
    (13). generator
    (14). promise
    2.深拷贝&amp;浅拷贝
    实现深拷贝   Json.stringify()    Json.parse()
    3.关于this：
    (1). 沿着作用域向上寻找最近的一个 function （不包含箭头函数），查看它的调用者
    (2). 正常调用   foo() , 指向 window；严格模式指向undefined；方法调用，谁调用指向谁；
    (3). 构造函数调用指向构造函数本身
    (4). 特殊调用   foo.call()  apply() bind()
    4.事件委托&amp;&amp;事件监听&amp;&amp;事件捕获&amp;&amp;事件冒泡
    事件捕获：从最外层到最内层
    事件冒泡：默认事件在冒泡阶段触发啊，从内在外；事件触发阶段的 e.target() 是点击的元素
    事件委托：子集的事件委托父级处理（处理 e.target() ）
    事件监听：可以给相同 DOM 添加事件/移除事件，还可以设置触发阶段
    5.js数据类型判断
    typeOf：string   Number  boolean symbol  bigint  undefined   object(null)    function
    instanceOf：Object   Function    Array   Date    RegExp  =>  也是object；判断实例是否是父类型/祖先类型的实例
    constructor：string  Boolean Number  Function    Date    Error   Array   HTMLDocument    window  object
    Object.protoType.toString.call()：最准确的类型判断
    6.for in 与 for of 的区别：
    for in ：更适合遍历对象，（数组也可遍历，但是遍历的是下标值），可以遍历到原型上的属性与方法（所有可枚举的属性，遍历健名）
    for of：优化版，更适用于遍历数组，不可遍历没有迭代器的对象，遍历的是数组元素，不包括原型上的属性与方法，可遍历字符串
    7.循环方式
    for/优化版：len = arr.length    
    forEach / map 
    object.keys()
    Object.getOwnPropertyNames()
    Reflect.ownKeys()
    8.在浏览器输入 URL 后
    (1).浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址
    (2).解析出 IP 地址后，根据该 IP 地址和默认端口 80 ，和服务器建立 TCP 连接
    (3).浏览器发出读取文件（URL 中域名后面部分对应的文件）的 HTTP 请求，该请求报文作为 TCP 三次挥手的第三个报文的数据发送给服务器
    (4).服务器对浏览器请求作出响应，并把对应的  html 文本发送给浏览器
    (5).释放 TCP 连接
    (6).浏览器将该 html 文本并显示内容
    (7).浏览器将获取的 HTML 文档解析成 DOM 树
    (8).处理 CSS 标记，构成层叠样式表模型 CSSOM
    (9).将 DOM 和 CSSOM 合并成渲染树（rendering tree），将会被创建，代表一系列渲染对象
    9.浏览器缓存
    (1).强缓存：所请求的数据在缓存数据库中尚未过期时，不与服务器交互，直接使用缓存数据库中的数据，header 头   expires资源失效时间；cache-control 资源有效期或者缓存方式
    (2).协商缓存：当强缓存过期未命中或者响应报文 Cache-Control 中有 must-redalidate 标识必须每次请求验证资源状态时，便使用协商缓存的方式去处理缓存文件。从缓存数据库中取出缓存的标识，然后向浏览器发送请求验证请求的数据是否已经更新，如果已更新则返回新的数据。若未更新则使用缓存数据库中的缓存数据。
    注：强缓存不过服务器，协商缓存需要过服务器，可同时存在，强缓存优先级高，当执行强缓存，若命中缓存则直接使用缓存数据库中的数据，不再进行缓存协商。
    10.跨域
    (1).修改响应头：Access-Control-Allow-Origin   后端
    (2).JSONP：只有 Ajax 请求存在跨域
    11.防抖与节流
    (1).防抖：用户触发事件过于频繁时，只要最后一次事件的操作
    (2).节流：控制执行次数
    12.原型
    (1).原型：任何一个 JS 对象都有一个原型对象 prto ，可以使用自己原型对象上的属性与方法，1> 通过对象的proto 获取；2> 通过构造函数的 protoType 属性获取；运用：用原型扩展对象上的属性与方法；3> 通过类的 protoType
    (2).类与继承：子类可以继承父类的属性与方法（extend）
    (3).原型继承：protoType 可以实现原型继承（通过构造函数的 proType）
    (4).原型链：对象有原型，当调用方法或访问属性时，如果对象内部无，则去原型对象上找，会一直找到 Object 对象这个，形成原型链
    13.call    apply   bind
    call( param1, param2, param3)
    call 可以改变 Animal 构造函数的 this :   apply( cat,[ num1, num2])   Animal.call(this)   可以实现多重继承
    14.事件循环
    process.nextTick()  setImmediate 方法
    process.nextTick()  同步代码执行之后，异步代码执行之前运行（callback）
    setImmediate()  异步代码执行之后执行  =>  当前事件循环结束后执行
    eventLoop：代码运行时，同步代码会直接放入运行栈，异步代码会放入任务队列中执行，将回调放入消息队列，当调用栈没有工作，也就是说同步代码已执行完毕，eventLoop 发挥作用，只做1件事情负责监听调用栈和消息队列，当调用栈没有任务，event 将消息队列中的异步任务放入调用栈执行
    宏任务、微任务：宏：计时器、ajax、读取文件；微：promise.then （new Promise（同步）、then（异步））
    同步=> process.nextTick() => 微任务 => 宏任务 => setImmediate
    15.TCP 协议
    TCP 工作在传输层，在程序之间传输数据；三次挥手，传输确认；四次挥手（连接中的客户端与服务端都可以发起关闭连接请求）
    目的：在不可靠的信道建立可靠连接
    第一次握手：发送 SYN 包，询问能否与服务器建立连接
    第二次握手：服务端同意连接，返回 SYN + ACK 包
    第三次握手：客户端收到回复 ACK 包，则连接建立（防止已失效的请求报文，传入服务器引起错误）
    第一次挥手：客户端发起关闭连接请求，发起 Fin 包表示请求关闭
    第二次挥手：服务端接收后发送 ACK ，进入关闭等待状态
    第三次挥手：客户端进入等待2状态，服务端发送未发送完数据 Fin 包，进入最后确认状态
    第四次挥手：客户端接收回复 ACK 包，进入超时等待状态，经过超时时间后关闭连接，服务端收到 ACK 包，立即关闭连接
    16.CORS
    浏览器发出 CORS 请求，会增加一个 origin 字段（自动完成）
    Access-Control-Allow-Origin 允许访问的资源
    17.原型
    proto：对象属性，在创建时就会生成（内置属性）原型（本身）；string/number 的原型是 string/number , 它们的原型的原型最终指向 Object
    proto.constructor：指向创建a、b、c 的对象（构造a，b，c的对象，string/number）
    JS new 一个对象的过程：
    (1).创建一个新对象 son 
    (2).新对象会被执行[[protoType]]连接，son.propt = Mothe.protoType 
    (3).新对象和函数调用的 this 绑定 => Mother.call(son, "Da")
    (4).执行构造函数中的代码
    18.继承
    (1).原型链继承：per.protoType = new Person()，则per构造函数中有 Person 上的属性方法，则 per instanceOf Person，让子类的原型等于父类的实例
    缺点：新实例无法向父类构造函数传参 
    (2).构造函数继承：Person.call(this, 'jer') 用 call 和 apply 将父类构造函数引入子类函数
    (3).组合继承（原型链继承 + 构造函数继承）：缺点：调用2次父类构造函数，子类的构造函数代替父类构造函数
    (4).原型式继承：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了可以随意增添属性的实例或对象    Object.create()
    (5).寄生式继承：原型继承外面套壳子
    (6).寄生组合式继承：函数内返回对象然后调用
    19.Node.js常用库及功能
    http 模块：主要用于搭建http服务，处理用户请求信息，创建静态服务器
    URL 模块：主要用于处理 url 的地址，方便对统一资源定位符进行操作处理
    path 模块：处理磁盘路径，绝对路径
    fs 模块：用于文件系统的增删改查
    20.webpack常用配置
    cache：是否缓存
    entry：入口文件
    output：输出文件
    devtool：开发工具 map    =>开发
    devServer：开发服务  =>开发
    module：loader 规则
    plugins：插件配置
    mode：模式 =>  区分开发和生产
    21.axios 拦截器
    请求拦截器：在请求发送前进行必要操作处理，例如添加统一cookie，请求体加验证、设置请求头等，相当于是对每个接口里相同操作的一个封装；
    ​                   =>  instance.interceptors.request.use(req => {}, err => {})，必须返回 config
    响应拦截器：请求得到响应之后，对响应体的一些处理，通常是数据的统一处理等，也常来判断登录失效等。
    ​                   =>  instance.interceptors.reponse.use(req => {},err => {})，返回响应结果
    ​ 


